using Newtonsoft.Json;
using NsqSharp;
using otaUtils.Models;
using ServiceStack.Data;
using ServiceStack.OrmLite;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace otaUtils
{
    // Demo 主要演示单例模式，顺便使用OrmLite，其是一个orm框架，可以实现类似ef的效果
    public class IBEPushDataHelper
    {

        // 定义一个静态变量来保存类的实例
        private static  IBEPushDataHelper instance;
        string connStr = System.Configuration.ConfigurationManager.ConnectionStrings["strTslCon"].ConnectionString;

        private IDbConnectionFactory dbFactory;
        protected System.Data.IDbConnection dbConn;
        // 定义一个标识确保线程同步
        private static readonly object locker = new object();

        // 定义私有构造函数，使外界不能创建该类实例
        private IBEPushDataHelper()
        {
            dbFactory = new OrmLiteConnectionFactory(connStr, PgSqlDailectProvider.InstanceProvider);
            //this.dbConn = dbFactory.OpenDbConnection();
        }



        /// <summary>
        /// 定义公有属性来提供全局访问点
        /// </summary>
        public static IBEPushDataHelper Instance
        {
            get
            {
                // 如果类的实例不存在则创建，否则直接返回
                if (instance == null)
                {
                    //因为在两个线程同时运行获取Instance 属性时，此时两个线程判断(instance ==null)这个条件时都返回真，此时两个线程就都会创建 instance 的实例，这样就违背了我们单例模式初衷了，既然上面的实现会运行多个线程执行，//那我们对于多线程的解决方案自然就是使 获取 instance 在同一时间只运行一个线程运行就好了
                    lock (locker)
                    {
                        if (instance == null)
                        {
                            instance = new IBEPushDataHelper();
                        }
                    }
                }
                return instance;
            }
        }

        #region pnrlog
        public long CreatePNRLog(PnrLogEntity entity)
        {
            try
            {
                using (var conn = this.dbFactory.Open())
                {

                    var result = conn.Insert(entity);
                    Log4NetFunc.LOGGER.Error("CreatePNRLog 返回结果  " + result + DateTime.Now);
                    if (result == 0)
                    {
                        Log4NetFunc.LOGGER.Error(string.Concat("pnr_log data save fail,pnr:", entity.PnrCode));
                    }
                    return result;
                }
            }
            catch (Exception ex)
            {
                Log4NetFunc.LOGGER.Error(string.Concat("pnr_log save ex:,", JsonConvert.SerializeObject(ex)));
                return 0;
            }
        }

        public void TestDb()
        {
            //注释是因为 构造函数中 dbConn 被注释了
            
          //var data=  this.dbConn.Select<PnrLogEntity>();
        }
        #endregion

    }
}
