OOD设计原则(solid)及设计模式


单一职责原则 Single Responsibility Principle
 一个类有且仅有一个职责，只有一个引起它变化的原因
 实质：”高内聚(功能内聚)，低耦合(类分配职责)”

开闭原则  Open Closed Principle
核心思想是：一个对象对扩展开放，对修改关闭。其实开闭原则的意思就是：对类的改动是通过增加代码进行的，而不是修改现有代码。
对应设计模式：策略模式和模板模式

里氏替换原则  Liskov Substitution Principle
核心思想：在任何父类出现的地方都可以用它的子类来替代。其实就是说：同一个继承体系中的对象应该有共同的行为特征。 多用组合少用继承

接口分离原则 Interface Segregation Principle
核心思想：应该遵循最小接口原则，这也是高内聚的一种表现，减少胖接口

依赖注入原则  Dependence Inversion Principle
核心思想：要依赖于抽象，不要依赖于具体实现，计算机的世界里没有是中间层解决不了的问题

OO三大特征：封装、继承、多态

重点说一下多态模式：实际上策略模式的一种体现。
举个例子：新增机票订单时，机票种类分 个人、团队、计划位、询价等。CreateTicket方法里面可以增加一个分类参数，然后里面多个if else去做，这样代码不利于扩展和维护。
利用策略模式做法： 建立一个接口icreate,不用类型的机票去实现自己的create,
如：individualCrate、 groupCreate 等方法。
通过多态性模式，系统分离了接口与具体的实现，从而在保持接口不变的情况下，可以非常容易地对实现进行维护和扩展。

